// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== جداول إدارة المستخدمين =====

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String?
  lastName    String?
  role        Role     @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  purchaseInvoices      PurchaseInvoice[]
  saleInvoices          SaleInvoice[]
  branchSaleInvoices    BranchSaleInvoice[]
  branchTransfers       BranchTransfer[]
  payments              Payment[]
  auditLogs             AuditLog[]
  
  @@map("users")
}

enum Role {
  ADMIN       // مدير النظام
  MANAGER     // مدير المخزن
  EMPLOYEE    // موظف
  USER        // مستخدم عادي
}

// ===== جداول الموردين =====

model Supplier {
  id              String   @id @default(cuid())
  code            String   @unique // كود المورد
  name            String   // اسم المورد
  contactPerson   String?  // الشخص المسؤول
  phone           String?  // رقم الهاتف
  email           String?  // البريد الإلكتروني
  address         String?  // العنوان
  city            String?  // المدينة
  country         String?  // البلد
  taxNumber       String?  // الرقم الضريبي
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  purchaseInvoices PurchaseInvoice[]
  
  @@map("suppliers")
}

// ===== جداول العملاء =====

model Customer {
  id              String   @id @default(cuid())
  code            String   @unique // كود العميل
  name            String   // اسم العميل
  phone           String?  // رقم الهاتف
  email           String?  // البريد الإلكتروني
  address         String?  // العنوان
  city            String?  // المدينة
  customerType    CustomerType @default(INDIVIDUAL)
  taxNumber       String?  // الرقم الضريبي
  currentBalance  Decimal  @default(0) @db.Decimal(10, 2) // الرصيد الحالي
  notes           String?  // ملاحظات
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  saleInvoices        SaleInvoice[]
  branchSaleInvoices  BranchSaleInvoice[]
  branchCustomerSales BranchCustomerSale[]
  
  @@map("customers")
}

enum CustomerType {
  INDIVIDUAL  // فردي
  COMPANY     // شركة
  WORKSHOP    // ورشة سيارات
  RETAILER    // تاجر تجزئة
  STORE       // محل
}

// ===== جداول المحلات =====

model Branch {
  id              String   @id @default(cuid())
  code            String   @unique // كود المحل
  name            String   // اسم المحل
  managerName     String?  // اسم مدير المحل
  phone           String?  // رقم الهاتف
  email           String?  // البريد الإلكتروني
  address         String   // عنوان المحل
  city            String   // المدينة
  isActive        Boolean  @default(true)
  openingDate     DateTime? // تاريخ الافتتاح
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  branchInventory     BranchInventoryItem[]
  branchSaleInvoices  BranchSaleInvoice[]
  branchTransfers     BranchTransfer[] @relation("ToBranch")
  sentTransfers       BranchTransfer[] @relation("FromBranch")
  productPrices       BranchProductPrice[]
  inventory           BranchInventory[]
  customerSales       BranchCustomerSale[]
  
  @@map("branches")
}


// ===== جداول المنتجات =====

model Category {
  id          String   @id @default(cuid())
  code        String   @unique // كود التصنيف
  name        String   // اسم التصنيف
  description String?  // وصف التصنيف
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  products    Product[]
  
  @@map("categories")
}

model Product {
  id                  String   @id @default(cuid())
  code                String   @unique // كود المنتج
  barcode             String?  @unique // الباركود
  name                String   // اسم المنتج
  description         String?  // وصف المنتج
  categoryId          String   // معرف التصنيف
  unit                String   // وحدة القياس (قطعة، كيلو، متر، إلخ)
  carModel            String   // موديل السيارة
  carYear             String?  // سنة السيارة
  originalPartNumber  String?  // رقم القطعة الأصلي
  unitPrice           Decimal? @db.Decimal(10, 2) // سعر الوحدة الأساسي
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  category                Category @relation(fields: [categoryId], references: [id])
  inventoryItems          InventoryItem[]
  branchInventoryItems    BranchInventoryItem[]
  branchProductPrices     BranchProductPrice[]
  branchTransferItems     BranchTransferItem[]
  purchaseInvoiceItems    PurchaseInvoiceItem[]
  saleInvoiceItems        SaleInvoiceItem[]
  branchSaleInvoiceItems  BranchSaleInvoiceItem[]
  branchInventory         BranchInventory[]
  branchCustomerSaleItems BranchCustomerSaleItem[]
  
  @@map("products")
}

// ===== جداول المخزون =====

model InventoryItem {
  id              String   @id @default(cuid())
  productId       String   // معرف المنتج
  quantity        Int      @default(0) // الكمية المتاحة
  reservedQty     Int      @default(0) // الكمية المحجوزة
  lastCostPrice   Decimal  @default(0) // آخر سعر شراء
  averageCost     Decimal  @default(0) // متوسط التكلفة
  lastUpdated     DateTime @default(now())
  
  // Relations
  product         Product @relation(fields: [productId], references: [id])
  
  @@unique([productId])
  @@map("inventory_items")
}

// ===== مخزون المحلات =====

model BranchInventoryItem {
  id              String   @id @default(cuid())
  branchId        String   // معرف المحل
  productId       String   // معرف المنتج
  quantity        Int      @default(0) // الكمية المتاحة في المحل
  reservedQty     Int      @default(0) // الكمية المحجوزة
  lastTransferPrice Decimal @default(0) // آخر سعر تحويل من المخزن الرئيسي
  lastUpdated     DateTime @default(now())
  
  // Relations
  branch          Branch @relation(fields: [branchId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
  
  @@unique([branchId, productId])
  @@map("branch_inventory_items")
}

// ===== أسعار المنتجات للمحلات =====

model BranchProductPrice {
  id              String   @id @default(cuid())
  branchId        String   // معرف المحل
  productId       String   // معرف المنتج
  transferPrice   Decimal  // سعر التحويل من المخزن الرئيسي للمحل
  retailPrice     Decimal  // سعر البيع من المحل للعميل
  wholesalePrice  Decimal? // سعر الجملة (اختياري)
  isActive        Boolean  @default(true)
  effectiveDate   DateTime @default(now()) // تاريخ سريان السعر
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  branch          Branch @relation(fields: [branchId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
  
  @@unique([branchId, productId])
  @@map("branch_product_prices")
}

// ===== تحويلات البضاعة للمحلات =====

model BranchTransfer {
  id              String   @id @default(cuid())
  transferNumber  String   @unique // رقم التحويل
  fromBranchId    String?  // المحل المرسل (null إذا من المخزن الرئيسي)
  toBranchId      String   // المحل المستقبل
  userId          String   // معرف المستخدم الذي أنشأ التحويل
  transferDate    DateTime // تاريخ التحويل
  totalAmount     Decimal  // القيمة الإجمالية للتحويل
  status          TransferStatus @default(PENDING)
  notes           String?  // ملاحظات
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  fromBranch      Branch? @relation("FromBranch", fields: [fromBranchId], references: [id])
  toBranch        Branch @relation("ToBranch", fields: [toBranchId], references: [id])
  user            User @relation(fields: [userId], references: [id])
  items           BranchTransferItem[]
  
  @@map("branch_transfers")
}

model BranchTransferItem {
  id              String   @id @default(cuid())
  branchTransferId String  // معرف التحويل
  productId       String   // معرف المنتج
  quantity        Int      // الكمية
  transferPrice   Decimal  // سعر التحويل
  totalPrice      Decimal  // السعر الإجمالي
  
  // Relations
  branchTransfer  BranchTransfer @relation(fields: [branchTransferId], references: [id], onDelete: Cascade)
  product         Product @relation(fields: [productId], references: [id])
  
  @@map("branch_transfer_items")
}

// ===== جداول فواتير الشراء =====

model PurchaseInvoice {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique // رقم الفاتورة
  supplierId      String   // معرف المورد
  userId          String   // معرف المستخدم الذي أدخل الفاتورة
  invoiceDate     DateTime // تاريخ الفاتورة
  dueDate         DateTime? // تاريخ الاستحقاق (للآجل)
  paymentType     PaymentType
  paymentMethod   PaymentMethod?
  totalAmount     Decimal  // المجموع الكلي
  paidAmount      Decimal  @default(0) // المبلغ المدفوع
  remainingAmount Decimal  // المبلغ المتبقي
  status          InvoiceStatus @default(PENDING)
  notes           String?  // ملاحظات
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  user            User @relation(fields: [userId], references: [id])
  items           PurchaseInvoiceItem[]
  payments        Payment[]
  
  @@map("purchase_invoices")
}

model PurchaseInvoiceItem {
  id              String   @id @default(cuid())
  purchaseInvoiceId String // معرف فاتورة الشراء
  productId       String   // معرف المنتج
  quantity        Int      // الكمية
  unitPrice       Decimal  // سعر الوحدة
  totalPrice      Decimal  // السعر الإجمالي
  
  // Relations
  purchaseInvoice PurchaseInvoice @relation(fields: [purchaseInvoiceId], references: [id], onDelete: Cascade)
  product         Product @relation(fields: [productId], references: [id])
  
  @@map("purchase_invoice_items")
}

// ===== جداول فواتير البيع =====

model SaleInvoice {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique // رقم الفاتورة
  customerId      String?  // معرف العميل (اختياري للبيع النقدي)
  storeId         String?  // معرف المحل (للبيع لمحلات الشركة)
  userId          String   // معرف المستخدم الذي أدخل الفاتورة
  invoiceDate     DateTime // تاريخ الفاتورة
  saleType        SaleType @default(REGULAR)
  paymentMethod   PaymentMethod
  totalAmount     Decimal  // المجموع الكلي
  discount        Decimal  @default(0) // الخصم
  netAmount       Decimal  // الصافي بعد الخصم
  notes           String?  // ملاحظات
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  customer        Customer? @relation(fields: [customerId], references: [id])
  store           Store? @relation(fields: [storeId], references: [id])
  user            User @relation(fields: [userId], references: [id])
  items           SaleInvoiceItem[]
  
  @@map("sale_invoices")
}

model SaleInvoiceItem {
  id              String   @id @default(cuid())
  saleInvoiceId   String   // معرف فاتورة البيع
  sparePartId     String   // معرف قطعة الغيار
  quantity        Int      // الكمية
  unitPrice       Decimal  // سعر الوحدة
  totalPrice      Decimal  // السعر الإجمالي
  costPrice       Decimal? // سعر التكلفة (للمراجعة)
  
  // Relations
  saleInvoice     SaleInvoice @relation(fields: [saleInvoiceId], references: [id], onDelete: Cascade)
  sparePart       Product @relation(fields: [sparePartId], references: [id])
  
  @@map("sale_invoice_items")
}

// ===== فواتير بيع المحلات =====

model BranchSaleInvoice {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique // رقم الفاتورة
  branchId        String   // معرف المحل
  customerId      String?  // معرف العميل (اختياري للبيع النقدي)
  userId          String   // معرف المستخدم الذي أدخل الفاتورة
  invoiceDate     DateTime // تاريخ الفاتورة
  paymentMethod   PaymentMethod
  totalAmount     Decimal  // المجموع الكلي
  discount        Decimal  @default(0) // الخصم
  netAmount       Decimal  // الصافي بعد الخصم
  notes           String?  // ملاحظات
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  branch          Branch @relation(fields: [branchId], references: [id])
  customer        Customer? @relation(fields: [customerId], references: [id])
  user            User @relation(fields: [userId], references: [id])
  items           BranchSaleInvoiceItem[]
  
  @@map("branch_sale_invoices")
}

model BranchSaleInvoiceItem {
  id                    String   @id @default(cuid())
  branchSaleInvoiceId   String   // معرف فاتورة البيع
  productId             String   // معرف المنتج
  quantity              Int      // الكمية
  unitPrice             Decimal  // سعر الوحدة (سعر الشراء من الشركة)
  branchSalePrice       Decimal  // سعر البيع في المحل (إجباري)
  totalPrice            Decimal  // السعر الإجمالي
  transferPrice         Decimal  // سعر التحويل من المخزن الرئيسي
  
  // Relations
  branchSaleInvoice     BranchSaleInvoice @relation(fields: [branchSaleInvoiceId], references: [id], onDelete: Cascade)
  product               Product @relation(fields: [productId], references: [id])
  
  @@map("branch_sale_invoice_items")
}

// ===== جداول المدفوعات =====

model Payment {
  id                String   @id @default(cuid())
  purchaseInvoiceId String?  // معرف فاتورة الشراء (إذا كان دفع لمورد)
  userId            String   // معرف المستخدم الذي سجل الدفعة
  amount            Decimal  // المبلغ
  paymentMethod     String // CASH, BANK, CHECK
  paymentDate       DateTime // تاريخ الدفع
  bankName          String?  // اسم البنك (إذا كان عن طريق البنك)
  checkNumber       String?  // رقم الشيك
  referenceNumber   String?  // رقم المرجع
  notes             String?  // ملاحظات
  createdAt         DateTime @default(now())
  
  // Relations
  purchaseInvoice   PurchaseInvoice? @relation(fields: [purchaseInvoiceId], references: [id])
  user              User @relation(fields: [userId], references: [id])
  
  @@map("payments")
}

// مخزون المحلات
model BranchInventory {
  id              String   @id @default(cuid())
  branchId        String   // معرف المحل
  sparePartId     String   // معرف قطعة الغيار
  quantity        Int      @default(0) // الكمية المتاحة
  branchSalePrice Decimal  @db.Decimal(10, 2) // سعر البيع في المحل
  lastUpdated     DateTime @updatedAt
  
  // Relations
  branch          Branch @relation(fields: [branchId], references: [id])
  sparePart       Product @relation(fields: [sparePartId], references: [id])
  
  @@unique([branchId, sparePartId])
  @@map("branch_inventory")
}

// فواتير بيع المحلات للعملاء
model BranchCustomerSale {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique // رقم الفاتورة
  branchId        String   // معرف المحل
  customerId      String?  // معرف العميل (اختياري)
  customerName    String?  // اسم العميل (إذا لم يكن مسجل)
  customerPhone   String?  // هاتف العميل
  invoiceDate     DateTime @default(now()) // تاريخ الفاتورة
  subtotal        Decimal  @db.Decimal(10, 2) // المجموع الفرعي
  taxAmount       Decimal  @default(0) @db.Decimal(10, 2) // مبلغ الضريبة
  discountAmount  Decimal  @default(0) @db.Decimal(10, 2) // مبلغ الخصم
  totalAmount     Decimal  @db.Decimal(10, 2) // المجموع الكلي
  paidAmount      Decimal  @default(0) @db.Decimal(10, 2) // المبلغ المدفوع
  remainingAmount Decimal  @db.Decimal(10, 2) // المبلغ المتبقي
  paymentType     PaymentType @default(CASH) // نوع الدفع
  status          InvoiceStatus @default(PENDING) // حالة الفاتورة
  notes           String?  // ملاحظات
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  branch          Branch @relation(fields: [branchId], references: [id])
  customer        Customer? @relation(fields: [customerId], references: [id])
  items           BranchCustomerSaleItem[]
  
  @@map("branch_customer_sales")
}

// عناصر فاتورة بيع المحل للعملاء
model BranchCustomerSaleItem {
  id                      String   @id @default(cuid())
  branchCustomerSaleId    String   // معرف فاتورة البيع
  sparePartId             String   // معرف قطعة الغيار
  quantity                Int      // الكمية
  unitPrice               Decimal  @db.Decimal(10, 2) // سعر الوحدة (سعر البيع في المحل)
  totalPrice              Decimal  @db.Decimal(10, 2) // السعر الإجمالي
  
  // Relations
  branchCustomerSale      BranchCustomerSale @relation(fields: [branchCustomerSaleId], references: [id], onDelete: Cascade)
  sparePart               Product @relation(fields: [sparePartId], references: [id])
  
  @@map("branch_customer_sale_items")
}

// ===== جداول التقارير والمراجعة =====

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  // معرف المستخدم
  action      String   // العملية المنجزة
  tableName   String?  // اسم الجدول المتأثر
  recordId    String?  // معرف السجل المتأثر
  oldValues   Json?    // القيم القديمة
  newValues   Json?    // القيم الجديدة
  ipAddress   String?  // عنوان IP
  userAgent   String?  // معلومات المتصفح
  createdAt   DateTime @default(now())
  
  // Relations
  user        User? @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

// ===== الأنواع المساعدة =====

enum PaymentType {
  CASH    // نقدي
  CREDIT  // آجل
}

enum PaymentMethod {
  CASH    // نقدي
  BANK    // مصرفي
  CHECK   // شيك
}

enum InvoiceStatus {
  PENDING     // معلقة
  PARTIAL     // مدفوعة جزئياً
  PAID        // مدفوعة بالكامل
  CANCELLED   // ملغية
}

enum SaleType {
  REGULAR     // بيع عادي B2B أو للأفراد
  BRANCH      // بيع للمحلات التابعة للشركة
  WORKSHOP    // بيع للورش
}

enum TransferStatus {
  PENDING     // في الانتظار
  SENT        // تم الإرسال
  RECEIVED    // تم الاستلام
  CANCELLED   // ملغي
}

// ===== جدول المحلات/الفروع =====

model Store {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  manager     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  saleInvoices SaleInvoice[]
  // inventoryTransactions InventoryTransaction[] // سيتم إضافتها لاحقاً
  
  @@map("stores")
}


